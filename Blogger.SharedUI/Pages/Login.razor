@page "/login"
@using Blogger.Shared.Models;
@using Blogger.SharedUI.ServiceInterfaces;
@using System.IdentityModel.Tokens.Jwt
@using System.Security.Claims

@inject IAppService AppService
@inject IJSRuntime JSRuntime
@inject NavigationManager NavManager

<h3>Login</h3>

<EditForm Model="@loginModel" OnValidSubmit="Submit">
    <DataAnnotationsValidator />
    <div class="form-group">
        <label>Username or Email address</label>
        <input @bind-value="loginModel.UserName" class="form-control" placeholder="Enter email or username">
        <ValidationMessage For="@(() => loginModel.UserName)" />
    </div>
    <div class="mt-2 form-group">
        <label>Password</label>
        <input type="password" @bind-value="loginModel.password" class="form-control" placeholder="Password">
        <ValidationMessage For="@( () => loginModel.password)" />
    </div>

    <div class="mt-2 text-end">
        <NavLink class="nav-link" href="registration">
            <span>Click here to create new account?</span>
        </NavLink>
    </div>

    <div class="text-center mt-2">
        <button class="btn btn-primary" type="submit">
            <span class="@_spinnerClass" role="status" aria-hidden="true"></span>
            SignIn
        </button>
    </div>
</EditForm>

@code {
    string message = "Default";

    LoginModel loginModel = new();

    private string _spinnerClass = "";

    private async void Submit()
    {
        _spinnerClass = "spinner-border spinner-border-sm";

        var response = await AppService.AuthenticateUser(loginModel);
        if(!string.IsNullOrWhiteSpace(response))
        {
            var handler = new JwtSecurityTokenHandler();
            var jsontoken = handler.ReadToken(response) as JwtSecurityToken;

            // string userID = jsontoken.Claims.FirstOrDefault(f => f.Type == JwtRegisteredClaimNames.NameId).Value;
            // string name = jsontoken.Claims.FirstOrDefault(f => f.Type == JwtRegisteredClaimNames.Name).Value;

            string userID = jsontoken.Claims.First(f => f.Type == JwtRegisteredClaimNames.NameId).Value;
            string name = jsontoken.Claims.First(f => f.Type == JwtRegisteredClaimNames.UniqueName).Value;

            string email = loginModel.UserName;

            var userBasicDetail = new UserBasicDetail
                {
                    Email = email,
                    Name = name,
                    Token = response,
                    UserID = userID
                };

            await AppService.SetSecureStorage(userBasicDetail);

            NavManager.NavigateTo("/dashboard");

            //message = "Login Successful";
            //await JSRuntime.InvokeAsync<object>("Alert", message);
        }
        else
        {
            message = "Invalid username or password";
            await JSRuntime.InvokeAsync<object>("Alert", message);
            //await App.Current.MainPage.DisplayAlert("Oops", "Invalid username or password", "OK");
        }

        _spinnerClass = "";
        this.StateHasChanged();
    }
}
