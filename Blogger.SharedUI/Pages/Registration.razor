@page "/Registration"
@using Blogger.Shared.Models;
@using Blogger.SharedUI.ServiceInterfaces;

@inject IAppService AppService
@inject IJSRuntime JSRuntime

<h3>Registration</h3>

<EditForm Model="@registrationModel" OnValidSubmit="Submit">
    <DataAnnotationsValidator />

    <div class="mb-2">
        <img src="@_userAvatar" @onclick="DisplayAction" height="50" width="50" class="rounded-circle" />
    </div>


    <div class="form-group">
        <label>First Name</label>
        <input class="form-control" @bind-value="registrationModel.FirstName" placeholder="Enter First Name">
        <ValidationMessage For="( () => registrationModel.FirstName)" />
    </div>

    <div class="form-group">
        <label>Last Name</label>
        <input class="form-control" @bind-value="registrationModel.LastName" placeholder="Enter Last Name">
        <ValidationMessage For="( () => registrationModel.LastName)" />
    </div>

    <div class="mt-2 form-group">
        <label>Gender</label>
        <div class="d-flex flex-row">
            <div class="d-flex gap-2">
                <div class="form-check">
                    <input @onchange="@(()=> registrationModel.Gender="male")" class="form-check-input" type="radio" name="flexRadioDefault">
                    <label class="form-check-label" for="flexRadioDefault1">
                        Male
                    </label>
                </div>
                <div class="form-check">
                    <input @onchange="@(()=> registrationModel.Gender="female")" class="form-check-input" type="radio" name="flexRadioDefault">
                    <label class="form-check-label" for="flexRadioDefault2">
                        Female
                    </label>
                </div>
            </div>
        </div>
        <ValidationMessage For="@(()=> registrationModel.Gender)" />
    </div>

    <div class="form-group">
        <label>Email address</label>
        <input type="email" class="form-control" @bind-value="registrationModel.Email" placeholder="Enter email">
        <ValidationMessage For="( ()=> registrationModel.Email)" />
    </div>

    <div class="form-group">
        <label>UserName</label>
        <input class="form-control" @bind-value="registrationModel.UserName" placeholder="Enter username">
        <ValidationMessage For="( ()=> registrationModel.UserName)" />
    </div>

    <div class="mt-2 form-group">
        <label>Password</label>
        <input type="password" @bind-value="registrationModel.Password" class="form-control" placeholder="Password">
        <ValidationMessage For="( () => registrationModel.Password)" />
    </div>

    <div class="mt-2 text-end">
        <NavLink class="nav-link" href="/">
            <span>Already have account?</span>
        </NavLink>
    </div>

    <div class="text-center mt-2">
        <button class="btn btn-primary" type="submit">
            <span class="@_spinnerClass" role="status" aria-hidden="true"></span>
            Register
        </button>
    </div>

</EditForm>

@code {
    RegistrationModel registrationModel = new();

    string message = "Default";

    private string _spinnerClass = "";

    private string _userAvatar = "images/user.png";
    private string _imageBase64Data = string.Empty;

    private async void Submit()
    {
        _spinnerClass = "spinner-border spinner-border-sm";

        if (!string.IsNullOrWhiteSpace(_imageBase64Data))
        {
            registrationModel.UserAvatar = _imageBase64Data;
        }

        var response = await AppService.RegisterUser(registrationModel);
        if (response.IsSuccess)
        {
            message = "User Registered";
            await JSRuntime.InvokeAsync<object>("Alert", message);
        }
        else
        {
            message = response.ErrorMessage;
            await JSRuntime.InvokeAsync<object>("Alert", message);
            //await App.Current.MainPage.DisplayAlert("Oops", "Invalid username or password", "OK");
        }

        _spinnerClass = "";
        this.StateHasChanged();
    }

    private async void DisplayAction()
    {
        var response = await AppService.DisplayAction(_userAvatar, _imageBase64Data);
        
        if (!string.IsNullOrWhiteSpace(response.ImageBase))
        {
            _userAvatar = response.Avatar;
            _imageBase64Data = response.ImageBase;
            this.StateHasChanged();
        }
       
        
    }

}
