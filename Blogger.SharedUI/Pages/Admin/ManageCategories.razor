@page "/admin/manage-categories"

@inject ICategoryService CategoryService;
@inject IJSRuntime Js

<div class="container">
    <div class="d-flex justify-content-between align-items-center">
        <h3>Manage Categories</h3>
        <button class="btn btn-primary btn-sm" @onclick="OpenCategoryFormAsync">+ Add new Category</button>
    </div>
    <hr/>
    <table class="table">
        <thead>
            <tr>
                <th>#</th>
                <th>Id</th>
                <th>Name</th>
                <th>Slug</th>
                <th>Delete Record</th>
            </tr>
        </thead>
        <tbody>
            @if(_loading)
            {
                <tr>
                    <td colspan="4">
                        Loading categories.......
                    </td>
                </tr>
            }
            else if(!_loading && (Categories is null || !Categories.Any()))
            {
                <tr>
                    <td colspan="4">
                        no categories found
                    </td>
                </tr>
            }
            else
            {
                int sno = 1;
                @foreach (var category in Categories)
                {
                    <tr>
                        <td>@sno</td>
                        <td>@category.Id</td>
                        <td>@category.Name</td>
                        <td>@category.Slug</td>
                        <td><button class="btn btn-primary btn-sm" @onclick="() => EditCategoryAsync(category)">Edit</button></td>
                        <td><button class="btn btn-primary btn-sm" @onclick="() => DeleteCategoryAsync(category.Id)">Delete</button></td>   
                    </tr>
                    sno++;
                }
            }
        </tbody>
    </table>
</div>
<dialog id="@_categoryFormDialogId">
    <SaveCategoryForm CategoryParm="_categoryModel" OnSaveCategory="OnSaveCat" OnCloseForm="CloseCategoryFormAsync" />
</dialog>
<style type="text/css">
dialog{
    padding:0;
    border: 2px solid;
}    
</style>


@code {
    private const string _categoryFormDialogId = "category-form";
    private bool _loading = false;
    private List<Category> Categories;

    private Category _categoryModel = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadCategoriesAsync();
    }

    private async Task LoadCategoriesAsync()
    {
        _loading = true;
        try
        {
            Categories = await CategoryService.GetAllCategories();
        }
        catch (Exception ex)
        {

        }
        finally
        {
            _loading = false;
        }
    }

    private async Task OnSaveCat(MethodResult saveCategoryResult)
    {
        if(saveCategoryResult.Status)
        {
            //Category saved successfully
            await AlertAsync("Category Saved Successfully");
            await LoadCategoriesAsync();
            await Js.InvokeVoidAsync("window.closeModal", _categoryFormDialogId);
        }
        else
        {
            //there was some error
            await AlertAsync(saveCategoryResult.ErrorMessage!);
        }
    }

    private async Task AlertAsync(string message)
    {
        await Js.InvokeVoidAsync("window.alert", message);
    }

    private async Task OpenCategoryFormAsync()
    {
        _categoryModel = new();
        await Js.InvokeVoidAsync("window.openModal", _categoryFormDialogId);
    }

    private async Task CloseCategoryFormAsync()
    {
        _categoryModel = new();
        await Js.InvokeVoidAsync("window.closeModal", _categoryFormDialogId);
    }

    private async Task EditCategoryAsync(Category category)
    {
        _categoryModel = category.Clone();
        await Js.InvokeVoidAsync("window.openModal", _categoryFormDialogId);
    }

    private async void DeleteCategoryAsync(int Id)
    {
        await CategoryService.DeleteCategory(Id);
        await LoadCategoriesAsync();
        await AlertAsync("Category Deleted Successfully");
    }
}
